{% extends "contentj.jinja2" %}

<title>Cesium preset animation</title>


{% block headbody %}
    <script src="http://www.osgeo.cn/webgis/f2elib/cesium_1.51/Cesium.js"></script>
    <style>
        @import url(http://www.osgeo.cn/webgis/f2elib/cesium_1.51/Widgets/widgets.css);

        html, body, #cesiumContainer {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
    </style>

    <style type="text/css">
        #top1 {
            text-align: center;
            width: 100%;
            height: 8%;
            float: left;

        }



        #bottom2 {

            width: 99%;
            height: 500px;

        }
    </style>

{% endblock %}

{% block cntbody %}



        <div id="top1">
        China 2000 Land Use Vector Data Online Map
        </div>
        <div>

            <div id="bottom2"></div>
        </div>
   <div style="clear: both"></div>
<br>
<br>

    <script>

        widget = new Cesium.Viewer('bottom2');
        layers = widget.scene.globe.imageryLayers;
        //layers.removeAll();
        var blackMarble = layers.addImageryProvider(new Cesium.WebMapServiceImageryProvider({
            url: 'http://wcs.osgeo.cn:8088/service?',
            layers: 'maplet_v000',
            version: '1.1.0',
            parameters: {
                transparent: 'true',
                format: 'image/png'
            },
        }));
        widget.camera.setView({
            destination: Cesium.Rectangle.fromDegrees(-100, 0, 310, 80)
        });

        var viewer = widget;
        var scene = viewer.scene;
        var canvas = viewer.canvas;
        canvas.setAttribute('tabindex', '0'); // needed to put focus on the canvas
        canvas.onclick = function () {
            canvas.focus();
        };
        var ellipsoid = viewer.scene.globe.ellipsoid;

        // disable the default event handlers
        // scene.screenSpaceCameraController.enableRotate = false;
        // scene.screenSpaceCameraController.enableTranslate = false;
        // scene.screenSpaceCameraController.enableZoom = false;
        // scene.screenSpaceCameraController.enableTilt = false;
        // scene.screenSpaceCameraController.enableLook = false;

        var startMousePosition;
        var mousePosition;
        var flags = {
            looking: false,
            moveForward: false,
            moveBackward: false,
            moveUp: false,
            moveDown: false,
            moveLeft: false,
            moveRight: false
        };

        var handler = new Cesium.ScreenSpaceEventHandler(canvas);

        handler.setInputAction(function (movement) {
            flags.looking = true;
            mousePosition = startMousePosition = Cesium.Cartesian3.clone(movement.position);
        }, Cesium.ScreenSpaceEventType.LEFT_DOWN);

        handler.setInputAction(function (movement) {
            mousePosition = movement.endPosition;
        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);

        handler.setInputAction(function (position) {
            flags.looking = false;
        }, Cesium.ScreenSpaceEventType.LEFT_UP);

        // function getFlagForKeyCode(keyCode) {
        //     switch (keyCode) {
        //     case 'W'.charCodeAt(0):
        //         return 'moveForward';
        //     case 'S'.charCodeAt(0):
        //         return 'moveBackward';
        //     case 'Q'.charCodeAt(0):
        //         return 'moveUp';
        //     case 'E'.charCodeAt(0):
        //         return 'moveDown';
        //     case 'D'.charCodeAt(0):
        //         return 'moveRight';
        //     case 'A'.charCodeAt(0):
        //         return 'moveLeft';
        //     default:
        //         return undefined;
        //     }
        // }
        //
        // document.addEventListener('keydown', function(e) {
        //     var flagName = getFlagForKeyCode(e.keyCode);
        //     if (typeof flagName !== 'undefined') {
        //         flags[flagName] = true;
        //     }
        // }, false);
        //
        // document.addEventListener('keyup', function(e) {
        //     var flagName = getFlagForKeyCode(e.keyCode);
        //     if (typeof flagName !== 'undefined') {
        //         flags[flagName] = false;
        //     }
        // }, false);

        viewer.clock.onTick.addEventListener(function (clock) {
            var camera = viewer.camera;
            if (flags.looking) {
                var width = canvas.clientWidth;
                var height = canvas.clientHeight;

                // Coordinate (0.0, 0.0) will be where the mouse was clicked.
                var x = (mousePosition.x - startMousePosition.x) / width;
                var y = -(mousePosition.y - startMousePosition.y) / height;

                var lookFactor = 0.05;
                camera.lookRight(x * lookFactor);
                camera.lookUp(y * lookFactor);
            }

            // Change movement speed based on the distance of the camera to the surface of the ellipsoid.
            var cameraHeight = ellipsoid.cartesianToCartographic(camera.position).height;
            var moveRate = cameraHeight / 100.0;

            if (flags.moveForward) {
                camera.moveForward(moveRate);
            }
            if (flags.moveBackward) {
                camera.moveBackward(moveRate);
            }
            if (flags.moveUp) {
                camera.moveUp(moveRate);
            }
            if (flags.moveDown) {
                camera.moveDown(moveRate);
            }
            if (flags.moveLeft) {
                camera.moveLeft(moveRate);
            }
            if (flags.moveRight) {
                camera.moveRight(moveRate);
            }
        });

        function zizhuan() {
            var i = Date.now();

            function rotate() {
                var a = .1;
                var t = Date.now();
                var n = (t - i) / 1e3;
                i = t;
                viewer.scene.camera.rotate(Cesium.Cartesian3.UNIT_Z, -a * n);
            }

            viewer.clock.onTick.addEventListener(rotate);
            setTimeout(function () {
                viewer.clock.onTick.removeEventListener(rotate);
            }, 45000);
        }

        flags.moveBackward = true;  // 向后拉
        setTimeout(function () {  // 向前拉
            flags.moveBackward = false;
            flags.moveForward = true;
        }, 3000);
        setTimeout(function () { // 向左拉 2s
            flags.moveForward = false;
            flags.moveLeft = true;
        }, 10000);
        setTimeout(function () { // 向右拉 3s
            flags.moveLeft = false;
            flags.moveRight = true;
        }, 12000);
        setTimeout(function () {
            flags.moveRight = false;
            flags.moveLeft = true;
        }, 15500);
        setTimeout(function () {
            flags.moveLeft = false;
            flags.moveDown = true;
        }, 17000);
        setTimeout(function () {
            flags.moveDown = false;
            flags.moveUp = true;
        }, 19000);
        setTimeout(function () {
            flags.moveUp = false;
            flags.moveBackward = true;
        }, 21000);
        setTimeout(function () {  // 向前拉
            flags.moveBackward = false;
            zizhuan()
        }, 21000 + 4000);

    </script>


{% endblock %}