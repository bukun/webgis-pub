{% extends "contentj.jinja2" %}


{% block headbody %}
    <title>Non-geographic map</title>
{% endblock %}

{% block cntbody %}




        <h2 id="not-of-this-earth">Not this earth</h2>

        <p>In some cases, the map does not represent the surface of the earth, so at this time it has no concept of geographic latitude and geographic longitude. This usually refers to large scanned images, such as game maps.</p>

        <p>For this tutorial, we chose a star map from Star Control II:</p>

        <center>
            <img src="./leaflet_non_geographical/uqm_map_400px.png" style="border: 1px solid #ccc; border-radius: 5px"><br>
        </center>

        <p>In the corner of this star map, you can see a built-in square coordinate system. This will allow us to build a coordinate system.</p>

        <center>
            <img src="./leaflet_non_geographical/uqm_map_detail.png" style="border: 1px solid #ccc; border-radius: 5px"><br>
        </center>

        <h2 id="crssimple">Simple CRS</h2>

        <p><strong>CRS</strong> stands for the coordinate reference system, a term used by geographers to interpret the meaning of coordinates in coordinate vectors. For example, <code class="highlighter-rouge">[15, 60]</code> represents a point in the Indian Ocean.
        </p>

        <p>A Leaflet map has a CRS (and <em>only</em><em>1</em> CRS), which can be changed when the map is created. For our game map, we will create a square grid using <code class="highlighter-rouge">CRS.Simple</code>:
        </p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> map = L.map(<span class="hljs-string">'map'</span>, {
    crs: L.CRS.Simple
});
</code></pre>
            </div>
        </div>

        <p>Then we add the star map image and its approximate bounds to <code class="highlighter-rouge">L.ImageOverlay</code>:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> bounds = [[<span class="hljs-number">0</span>,<span
                    class="hljs-number">0</span>], [<span class="hljs-number">1000</span>,<span
                    class="hljs-number">1000</span>]];
<span class="hljs-keyword">var</span> image = L.imageOverlay(<span class="hljs-string">'uqm_map_full.png'</span>, bounds).addTo(map);
</code></pre>
            </div>
        </div>

        <p>Then show the entire map:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs css"><span class="hljs-tag">map</span><span
                    class="hljs-class">.fitBounds</span>(<span class="hljs-tag">bounds</span>);
</code></pre>
            </div>
        </div>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_non_geographical/crs-simple-example1.html" width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a href="./leaflet_non_geographical/crs-simple-example1.html">View this example</a></small>
                </td>
            </tr>
            </tbody>
        </table>

        <p>This example is not very effective because the entire map is not visible after executing <code class="highlighter-rouge">fitBounds()</code>.</p>

        <h2 id="common-gotchas-in-crssimple-maps">Frequently Asked Questions for CRS.Simple Maps</h2>

        <p>In the default Leaflet CRS and <code class="highlighter-rouge">CRS.Earth</code>, 360-degree longitude is mapped to 256 horizontal pixels (at zoom level of 0), and approximately 170 latitudes are mapped Up to 256 vertical pixels (when the zoom level is 0).
        </p>

        <p>In the <code class="highlighter-rouge">CRS.Simple</code> coordinate system, a horizontal map unit is projected to a horizontal pixel, as is the vertical direction. This means that the entire map is about 1000 by 1000 pixels in size and cannot be placed in our HTML container. Fortunately, we can set <code class="highlighter-rouge">minZoom</code> to a value less than 0:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> map = L.map(<span class="hljs-string">'map'</span>, {
    crs: L.CRS.Simple,
    minZoom: -<span class="hljs-number">5</span>
});
</code></pre>
            </div>
        </div>

        <h3 id="pixels-vs-map-units">Pixels and map units</h3>

        <p>A common mistake with <code class="highlighter-rouge">CRS.Simple</code> is that the map unit is the image pixel. In this example, the map covers 1000*1000 map units, but the image size is 2315*2315 pixels. In different instances, 1 pixel = 1 map unit, or 64 pixels = 1 map unit, or other equivalent relationship may be required. Use map units to add your own layers in the coordinate system (<code class="highlighter-rouge">L.ImageOverlay</code>s, <code class="highlighter-rouge">L.Marker</code >s etc.).
        </p>

        <p>In fact, we use images that cover more than 1000 map units - and there are larger margins. Measure how many pixels between 0-1000 coordinates, you can calculate the correct coordinates of the image:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> bounds = [[-<span class="hljs-number">26.5</span>,-<span
                    class="hljs-number">25</span>], [<span class="hljs-number">1021.5</span>,<span class="hljs-number">1023</span>]];
<span class="hljs-keyword">var</span> image = L.imageOverlay(<span class="hljs-string">'uqm_map_full.png'</span>, bounds).addTo(map);
</code></pre>
            </div>
        </div>

        <p>Here, let's add some tags:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> sol = L.latLng([ <span class="hljs-number">145</span>, <span
                    class="hljs-number">175.2</span> ]);
L.marker(sol).addTo(map);
map.setView( [<span class="hljs-number">70</span>, <span class="hljs-number">120</span>], <span
                        class="hljs-number">1</span>);
</code></pre>
            </div>
        </div>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_non_geographical/crs-simple-example2.html" width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a href="./leaflet_non_geographical/crs-simple-example2.html">View this example</a></small>
                </td>
            </tr>
            </tbody>
        </table>

        <h3 id="this-is-not-the-latlng-youre-looking-for"><code class="highlighter-rouge">LatLng</code> is not the class you want</h3>

        <p>You'll find that Sol's coordinates are <code class="highlighter-rouge">[145,175]</code> instead of <code class="highlighter-rouge">[175,145]</code>, as is the map center point. In the CRS.Simple coordinate system, the coordinate style is [y, x] instead of [x, y], the same Leaflet
             Use [lat, lng] ([latitude, longitude]) instead of [lng, lat] ([longitude, latitude]).</p>

        <p>
            <small>(In technical terms, Leaflet prefers to use <code class="highlighter-rouge">[northing, easting]</code> instead of <code class="highlighter-rouge">[easting, northing]</code >-The first coordinate parameter represents north and south, and the second coordinate parameter represents something)
            </small>
        </p>

        <p>Use <code class="highlighter-rouge">[lng, lat]</code> or <code class="highlighter-rouge">[lat, lng]</code> or
             <code class="highlighter-rouge">[y, x]</code> or <code class="highlighter-rouge">[x, y]</code>
             The argument is not new and there has been no consensus. Due to lack of consensus, Leaflet uses <code class="highlighter-rouge">L.LatLng</code> instead of the controversial <code class="highlighter-rouge">L.Coordinate</code>.</p>

        <p>Using <code class="highlighter-rouge">L.LatLng</code>'s <code class="highlighter-rouge">[y, x]</code> coordinates is not very meaningful, we can easily Create an adapter:
        </p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> yx = L.latLng;

<span class="hljs-keyword">var</span> xy = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params">x, y</span>) </span>{
    <span class="hljs-keyword">if</span> (L.Util.isArray(x)) {    <span
                        class="hljs-comment">// When doing xy([x, y]);</span>
        <span class="hljs-keyword">return</span> yx(x[<span class="hljs-number">1</span>], x[<span
                        class="hljs-number">0</span>]);
    }
    <span class="hljs-keyword">return</span> yx(y, x);  <span class="hljs-comment">// When doing xy(x, y);</span>
};
</code></pre>
            </div>
        </div>

        <p>We can add stars and routes via <code class="highlighter-rouge">[x, y]</code> coordinates:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> sol      = xy(<span class="hljs-number">175.2</span>, <span
                    class="hljs-number">145.0</span>);
<span class="hljs-keyword">var</span> mizar    = xy( <span class="hljs-number">41.6</span>, <span class="hljs-number">130.1</span>);
<span class="hljs-keyword">var</span> kruegerZ = xy( <span class="hljs-number">13.4</span>,  <span class="hljs-number">56.5</span>);
<span class="hljs-keyword">var</span> deneb    = xy(<span class="hljs-number">218.7</span>,   <span class="hljs-number">8.3</span>);

L.marker(     sol).addTo(map).bindPopup(      <span class="hljs-string">'Sol'</span>);
L.marker(   mizar).addTo(map).bindPopup(    <span class="hljs-string">'Mizar'</span>);
L.marker(kruegerZ).addTo(map).bindPopup(<span class="hljs-string">'Krueger-Z'</span>);
L.marker(   deneb).addTo(map).bindPopup(    <span class="hljs-string">'Deneb'</span>);

<span class="hljs-keyword">var</span> travel = L.polyline([sol, deneb]).addTo(map);
</code></pre>
            </div>
        </div>

        <p>The map looks the same as before, but the code is more readable:</p>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_non_geographical/crs-simple-example3.html" width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a href="./leaflet_non_geographical/crs-simple-example3.html">View this example</a></small>
                </td>
            </tr>
            </tbody>
        </table>



{% endblock %}