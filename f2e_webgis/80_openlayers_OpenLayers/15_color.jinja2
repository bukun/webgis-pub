{% extends "contentj.jinja2" %}
<title>Color operation</title>

{% block headbody %}

    <link rel="stylesheet" href="https://openlayers.org/en/v5.2.0/css/ol.css" type="text/css">
    <!--导入最新版本ol的js文件。-->
    <script src="https://openlayers.org/en/v5.2.0/build/ol.js"></script>
    <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

{% endblock %}

{% block cntbody %}

        <div id="olmap" class="olmap"></div>
    <br>
   <table class="controls">
      <tr>
        <td>hue</td>
        <td><span id="hueOut"></span>°</td>
        <td><input id="hue" type="range" min="-180" max="180" value="0"/></td>
      </tr>
      <tr>
        <td>Chroma</td>
        <td><span id="chromaOut"></span> %</td>
        <td><input id="chroma" type="range" min="0" max="100" value="100"/></td>
      </tr>
      <tr>
        <td>lightness</td>
        <td><span id="lightnessOut"></span> %</td>
        <td><input id="lightness" type="range" min="0" max="100" value="100"/></td>
      </tr>
    </table>
    <br>
    <div>The raster source allows arbitrary manipulation of pixel values. In this example, the RGB values on the input tile source are adjusted in pixel mode before being rendered using the second raster source. The raster operation converts the pixels in the RGB space into HCL color spaces, adjusts the values according to the above controls, and then converts them back into RGB space for rendering.</div>
    <script>
      /**
       *以下颜色处理功能改编自https://github.com/d3/d3-color。
       */
      var Xn = 0.950470;
      var Yn = 1;
      var Zn = 1.088830;
      var t0 = 4 / 29;
      var t1 = 6 / 29;
      var t2 = 3 * t1 * t1;
      var t3 = t1 * t1 * t1;
      var twoPi = 2 * Math.PI;


      /**
       * 将RGB像素转换为HCL像素。
       * @param {Array.<number>} pixel RGB空间中的一个像素。
       * @return {Array.<number>}HCL空间中的一个像素.
       */
      function rgb2hcl(pixel) {
        var red = rgb2xyz(pixel[0]);
        var green = rgb2xyz(pixel[1]);
        var blue = rgb2xyz(pixel[2]);

        var x = xyz2lab(
            (0.4124564 * red + 0.3575761 * green + 0.1804375 * blue) / Xn);
        var y = xyz2lab(
            (0.2126729 * red + 0.7151522 * green + 0.0721750 * blue) / Yn);
        var z = xyz2lab(
            (0.0193339 * red + 0.1191920 * green + 0.9503041 * blue) / Zn);

        var l = 116 * y - 16;
        var a = 500 * (x - y);
        var b = 200 * (y - z);

        var c = Math.sqrt(a * a + b * b);
        var h = Math.atan2(b, a);
        if (h < 0) {
          h += twoPi;
        }

        pixel[0] = h;
        pixel[1] = c;
        pixel[2] = l;

        return pixel;
      }


      /**
       * 将HCL像素转换为RGB像素。
       * @param {Array.<number>} pixel HCL空间中的一个像素.
       * @return {Array.<number>} RGB空间中的像素.
       */
      function hcl2rgb(pixel) {
        var h = pixel[0];
        var c = pixel[1];
        var l = pixel[2];

        var a = Math.cos(h) * c;
        var b = Math.sin(h) * c;

        var y = (l + 16) / 116;
        var x = isNaN(a) ? y : y + a / 500;
        var z = isNaN(b) ? y : y - b / 200;

        y = Yn * lab2xyz(y);
        x = Xn * lab2xyz(x);
        z = Zn * lab2xyz(z);

        pixel[0] = xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
        pixel[1] = xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
        pixel[2] = xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);

        return pixel;
      }

      function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
      }

      function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0);
      }

      function rgb2xyz(x) {
        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
      }

      function xyz2rgb(x) {
        return 255 * (x <= 0.0031308 ?
          12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
      }
        //定义图层
      var raster = new ol.source.Raster({ //使用ol.RasterOperation函数从任意数量的输入源转换数据以将输入像素值转换为输出像素值的源。
        sources: [new ol.source.Stamen({            //输入源.用于Stamen tile服务器的层源。
          layer: 'watercolor',
          transition: 0
        })],
        operation: function(pixels, data) {
          var hcl = rgb2hcl(pixels[0]);

          var h = hcl[0] + Math.PI * data.hue / 180;
          if (h < 0) {
            h += twoPi;
          } else if (h > twoPi) {
            h -= twoPi;
          }
          hcl[0] = h;

          hcl[1] *= (data.chroma / 100);
          hcl[2] *= (data.lightness / 100);

          return hcl2rgb(hcl);
        },
        lib: {
          rgb2hcl: rgb2hcl,
          hcl2rgb: hcl2rgb,
          rgb2xyz: rgb2xyz,
          lab2xyz: lab2xyz,
          xyz2lab: xyz2lab,
          xyz2rgb: xyz2rgb,
          Xn: Xn,
          Yn: Yn,
          Zn: Zn,
          t0: t0,
          t1: t1,
          t2: t2,
          t3: t3,
          twoPi: twoPi
        }
      });

      var controls = {};

      raster.on('beforeoperations', function(event) {
        var data = event.data;
        for (var id in controls) {
          data[id] = Number(controls[id].value);
        }
      });

      var olmap = new ol.Map({
        layers: [
          new ol.layer.Image({  //服务器渲染的图像，可用于任意范围和分辨率。 请注意，选项中设置的任何属性都设置为图层对象上的ol.Object属性; 例如，设置标题：选项中的“我的标题”表示标题是可观察的，并且具有获取/设置访问者。
            source: raster      //此图层的来源
          })
        ],
        target: 'olmap', // 地图容器div层的id值
           //表示显示简单的2D视图地图。
        view: new ol.View({
          center: [0, 2500000], //地图初始中心点
          zoom: 2,      // 地图初始显示级别为2
          maxZoom: 18       // 用于确定分辨率约束的最大缩放级别。 它与minZoom（或maxResolution）和zoomFactor一起使用。 默认值为28.请注意，如果还提供了minResolution，则它优先于maxZoom。
        })
      });
        //ID控件事件
      var controlIds = ['hue', 'chroma', 'lightness'];
      controlIds.forEach(function(id) {
        var control = document.getElementById(id);
        var output = document.getElementById(id + 'Out');
        control.addEventListener('input', function() {      // 添加事件监听器
          output.innerText = control.value;
          raster.changed();
        });
        output.innerText = control.value;
        controls[id] = control;
      });
    </script>

{% endblock %}


