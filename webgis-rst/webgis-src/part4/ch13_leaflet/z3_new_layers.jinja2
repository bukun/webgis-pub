{% extends "contentj.jinja2" %}


{% block headbody %}
        <title>扩展Leaflet： 新图层</title>

{% endblock %}

{% block cntbody %}



        <p>本教程假定您已经阅读过<a
                href="./leaflet_new_layers/extending-1-classes.html">Leaflet的类继承原理</a>。
        </p>

        <p>在Leaflet中，“层”是指地图移动时一起移动的任何东西。在了解如何从头创建它们之前，更容易解释如何进行简单的扩展。</p>

        <h2 id="extension-methods">扩展方法</h2>

        <p>一些Leaflet类有所谓的“扩展方法”：为子类编写程序的入口点。</p>

        <p>其中一个“扩展方法”是<code class="highlighter-rouge">L.TileLayer.getTileUrl()</code>。每当新的瓦片需要知道要加载哪个图像时，该方法就会在<code
                class="highlighter-rouge">L.TileLayer</code>内部调用。通过制作<code class="highlighter-rouge">L.TileLayer</code>的子类并重写它的<code
                class="highlighter-rouge">getTileUrl()</code> 函数，我们可以创建自定义行为。</p>

        <p>让我们用一个定制的<code class="highlighter-rouge">L.TileLayer</code>方法来随即显示小猫PlaceKitten的照片：</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.TileLayer.Kitten = L.TileLayer.extend({
    getTileUrl: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params">coords</span>) </span>{
        <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">Math</span>.ceil( <span
                        class="hljs-built_in">Math</span>.random() * <span class="hljs-number">4</span> );
        <span class="hljs-keyword">return</span> <span
                        class="hljs-string">"https://placekitten.com/256/256?image="</span> + i;
    },
    getAttribution: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;a href='https://placekitten.com/attribution.html'&gt;PlaceKitten&lt;/a&gt;"</span>
    }
});

L.tileLayer.kitten = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> L.TileLayer.Kitten();
}

L.tileLayer.kitten().addTo(map);
</code></pre>
            </div>
        </div>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_new_layers/kittenlayer.html"
                            width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a
                            href="./leaflet_new_layers/kittenlayer.html">Show the example</a>
                    </small>
                </td>
            </tr>
            </tbody>
        </table>

        <p>一般来说,<code class="highlighter-rouge">getTileLayer()</code> 接收瓦片的坐标(比如<code
                class="highlighter-rouge">coords.x</code>, <code class="highlighter-rouge">coords.y</code> and <code
                class="highlighter-rouge">coords.z</code>)，并且从中生成一个瓦片链接。在我们的例子中，我们忽略了这些，每次只是用一个随机数来得到不同的小猫图像。</p>

        <h3 id="splitting-away-the-plugin-code">分离插件代码</h3>

        <p>在前面的示例中，<code class="highlighter-rouge">L.TileLayer.Kitten</code>被定义在它使用的地方。对于插件来说，最好将插件代码分割成独立的文件，并在使用时包含该文件。
        </p>

        <p>对于KittenLayer，您应该创建一个类似<code class="highlighter-rouge">L.KittenLayer.js</code> 的文件。js代码如下:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.TileLayer.Kitten = L.TileLayer.extend({
    getTileUrl: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params">coords</span>) </span>{
        <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">Math</span>.ceil( <span
                        class="hljs-built_in">Math</span>.random() * <span class="hljs-number">4</span> );
        <span class="hljs-keyword">return</span> <span
                        class="hljs-string">"https://placekitten.com/256/256?image="</span> + i;
    },
    getAttribution: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;a href='https://placekitten.com/attribution.html'&gt;PlaceKitten&lt;/a&gt;"</span>
    }
});
</code></pre>
            </div>
        </div>

        <p>然后，当显示地图时，包括那个文件:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs xml"><span class="nt"><span
                    class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span></span>
…
<span class="nt"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> </span></span><span class="na"><span
                        class="hljs-tag"><span class="hljs-attribute">src</span>=</span></span><span class="s"><span
                        class="hljs-tag"><span class="hljs-value">'leaflet.js'</span></span></span><span
                        class="nt"><span class="hljs-tag">&gt;</span></span><span class="xml">
</span><span class="o"><span class="xml"><span class="hljs-tag">&lt;</span></span></span><span class="nx"><span
                        class="xml"><span class="hljs-tag"><span
                        class="hljs-title">script</span></span></span></span><span class="xml"><span
                        class="hljs-tag"> </span></span><span class="nx"><span class="xml"><span class="hljs-tag"><span
                        class="hljs-attribute">src</span></span></span></span><span class="o"><span class="xml"><span
                        class="hljs-tag">=</span></span></span><span class="s1"><span class="xml"><span
                        class="hljs-tag"><span class="hljs-value">'L.KittenLayer.js'</span></span></span></span><span
                        class="o"><span class="xml"><span class="hljs-tag">&gt;</span></span></span><span
                        class="xml"><span class="xml">
</span></span><span class="o"><span class="xml"><span class="xml"><span
                        class="hljs-tag">&lt;</span></span></span></span><span class="nx"><span class="xml"><span
                        class="xml"><span class="hljs-tag"><span
                        class="hljs-title">script</span></span></span></span></span><span class="o"><span
                        class="xml"><span class="xml"><span class="hljs-tag">&gt;</span></span></span></span><span
                        class="xml"><span class="xml"><span class="javascript">
    </span></span></span><span class="kd"><span class="xml"><span class="xml"><span class="javascript"><span
                        class="hljs-keyword">var</span></span></span></span></span><span class="xml"><span
                        class="xml"><span class="javascript"> </span></span></span><span class="nx"><span
                        class="xml"><span class="xml"><span class="javascript">map</span></span></span></span><span
                        class="xml"><span class="xml"><span class="javascript"> </span></span></span><span
                        class="o"><span class="xml"><span class="xml"><span
                        class="javascript">=</span></span></span></span><span class="xml"><span class="xml"><span
                        class="javascript"> </span></span></span><span class="nx"><span class="xml"><span
                        class="xml"><span class="javascript">L</span></span></span></span><span class="p"><span
                        class="xml"><span class="xml"><span class="javascript">.</span></span></span></span><span
                        class="nx"><span class="xml"><span class="xml"><span class="javascript">map</span></span></span></span><span
                        class="p"><span class="xml"><span class="xml"><span
                        class="javascript">(</span></span></span></span><span class="s1"><span class="xml"><span
                        class="xml"><span class="javascript"><span class="hljs-string">'map-div-id'</span></span></span></span></span><span
                        class="p"><span class="xml"><span class="xml"><span
                        class="javascript">);</span></span></span></span><span class="xml"><span class="xml"><span
                        class="javascript">
    </span></span></span><span class="nx"><span class="xml"><span class="xml"><span
                        class="javascript">L</span></span></span></span><span class="p"><span class="xml"><span
                        class="xml"><span class="javascript">.</span></span></span></span><span class="nx"><span
                        class="xml"><span class="xml"><span
                        class="javascript">tileLayer</span></span></span></span><span class="p"><span class="xml"><span
                        class="xml"><span class="javascript">.</span></span></span></span><span class="nx"><span
                        class="xml"><span class="xml"><span class="javascript">kitten</span></span></span></span><span
                        class="p"><span class="xml"><span class="xml"><span class="javascript">().</span></span></span></span><span
                        class="nx"><span class="xml"><span class="xml"><span
                        class="javascript">addTo</span></span></span></span><span class="p"><span class="xml"><span
                        class="xml"><span class="javascript">(</span></span></span></span><span class="nx"><span
                        class="xml"><span class="xml"><span class="javascript">map</span></span></span></span><span
                        class="p"><span class="xml"><span class="xml"><span
                        class="javascript">);</span></span></span></span><span class="xml"><span class="xml"><span
                        class="javascript">
</span></span></span><span class="nt"><span class="hljs-tag">&lt;/<span
                        class="hljs-title">script</span>&gt;</span></span>
…
</code></pre>
            </div>
        </div>

        <h3 id="lgridlayer-and-dom-elements"><code class="highlighter-rouge">L.GridLayer</code> 和DOM元素</h3>

        <p>另一种扩展方法是<code class="highlighter-rouge">L.GridLayer.createTile()</code>.
            <code class="highlighter-rouge">L.TileLayer</code>假设存在一个图像网格（例如<code
                    class="highlighter-rouge">&lt;img&gt;</code>元素），而<code class="highlighter-rouge">L.GridLayer</code>不这样假设-它允许创建任何类型的HTML元素的网格。
        </p>

        <p><code class="highlighter-rouge">L.GridLayer</code>不但允许创建<code class="highlighter-rouge">&lt;img&gt;</code>
            的网格，而且还允许创建<code class="highlighter-rouge">&lt;div&gt;</code>网格, <code class="highlighter-rouge">&lt;canvas&gt;</code>网格或者
            <code class="highlighter-rouge">&lt;picture&gt;</code>网格(或者任何网格).<code class="highlighter-rouge">createTile()</code>
            只需返回给定瓦片坐标的<code class="highlighter-rouge">HTMLElement</code>实例。知道如何在DOM中操作元素是很重要的：Leaflet要去处理的是<code
                    class="highlighter-rouge">HTMLElement</code>实例，因此使用诸如JQuery之类的JS库创建的元素，Leaflet处理起来会出问题。</p>

        <p>自定义的<code class="highlighter-rouge">GridLayer</code>是在 <code class="highlighter-rouge">&lt;div&gt;</code>显示瓦片的坐标，这对于Leaflet内部调试和理解瓦片坐标如何工作特别有用。
        </p>


        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.GridLayer.DebugCoords = L.GridLayer.extend({
    createTile: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span
                        class="hljs-params">coords</span>) </span>{
        <span class="hljs-keyword">var</span> tile = <span class="hljs-built_in">document</span>.createElement(<span
                        class="hljs-string">'div'</span>);
        tile.innerHTML = [coords.x, coords.y, coords.z].join(<span class="hljs-string">', '</span>);
        tile.style.outline = <span class="hljs-string">'1px solid red'</span>;
        <span class="hljs-keyword">return</span> tile;
    }
});

L.gridLayer.debugCoords = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params">opts</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> L.GridLayer.DebugCoords(opts);
};

map.addLayer( L.gridLayer.debugCoords() );
</code></pre>
            </div>
        </div>

        <p>如果元素必须进行一些异步初始化，那么使用第二个函数参数<code class="highlighter-rouge">done</code>,
            然后当瓦片已经准备就绪（比如当一张图片已经完全加载时）或者出现错误时调用它。在这里，我们只是人为地延迟瓦片的加载。</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">createTile: <span
                    class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">coords, done</span>) </span>{
    <span class="hljs-keyword">var</span> tile = <span class="hljs-built_in">document</span>.createElement(<span
                        class="hljs-string">'div'</span>);
    tile.innerHTML = [coords.x, coords.y, coords.z].join(<span class="hljs-string">', '</span>);
    tile.style.outline = <span class="hljs-string">'1px solid red'</span>;

    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        done(<span class="hljs-literal">null</span>, tile);	<span class="hljs-comment">// Syntax is 'done(error, tile)'</span>
    }, <span class="hljs-number">500</span> + <span class="hljs-built_in">Math</span>.random() * <span
                        class="hljs-number">1500</span>);

    <span class="hljs-keyword">return</span> tile;
}
</code></pre>
            </div>
        </div>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_new_layers/gridcoords.html"
                            width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a
                            href="./leaflet_new_layers/gridcoords.html">Show the example</a>
                    </small>
                </td>
            </tr>
            </tbody>
        </table>

        <p>使用定制的<code class="highlighter-rouge">GridLayer</code>扩展方法,插件完全可以让任何HTML元素组成网格。一些插件已经使用<code
                class="highlighter-rouge">&lt;canvas&gt;</code>并采用该方法实现了高级渲染。</p>

        <p> 一个非常基础的<code class="highlighter-rouge">&lt;canvas&gt;</code> <code
                class="highlighter-rouge">GridLayer</code>是下面这样的：</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.GridLayer.CanvasCircles = L.GridLayer.extend({
    createTile: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span
                        class="hljs-params">coords</span>) </span>{
        <span class="hljs-keyword">var</span> tile = <span class="hljs-built_in">document</span>.createElement(<span
                        class="hljs-string">'canvas'</span>);

        <span class="hljs-keyword">var</span> tileSize = <span class="hljs-keyword">this</span>.getTileSize();
        tile.setAttribute(<span class="hljs-string">'width'</span>, tileSize.x);
        tile.setAttribute(<span class="hljs-string">'height'</span>, tileSize.y);

        <span class="hljs-keyword">var</span> ctx = tile.getContext(<span class="hljs-string">'2d'</span>);

        <span class="hljs-comment">// Draw whatever is needed in the canvas context</span>
        <span class="hljs-comment">// For example, circles which get bigger as we zoom in</span>
        ctx.beginPath();
        ctx.arc(tileSize.x/<span class="hljs-number">2</span>, tileSize.x/<span class="hljs-number">2</span>, <span
                        class="hljs-number">4</span> + coords.z*<span class="hljs-number">4</span>, <span
                        class="hljs-number">0</span>, <span class="hljs-number">2</span>*<span class="hljs-built_in">Math</span>.PI, <span
                        class="hljs-literal">false</span>);
        ctx.fill();

        <span class="hljs-keyword">return</span> tile;
    }
});
</code></pre>
            </div>
        </div>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_new_layers/canvascircles.html"
                            width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a
                            href="./leaflet_new_layers/canvascircles.html">Show the example</a>
                    </small>
                </td>
            </tr>
            </tbody>
        </table>

        <h2 id="the-pixel-origin">像素的原点</h2>

        <p>创建定制的<code class="highlighter-rouge">L.Layer</code>是可行的，但是需要更深入地了解Leaflet如何定位HTML元素，简述如下：</p>

        <ul>
            <li><code class="highlighter-rouge">L.Map</code>容器拥有“地图窗格”，也就是<code
                    class="highlighter-rouge">&lt;div&gt;</code></li>
            <li><code class="highlighter-rouge">L.Layer</code>是地图窗格中的HTML元素</li>
            <li>地图将所有的<code class="highlighter-rouge">LatLng</code>转换为地图上CRS中的坐标，然后将其在转换为绝对的“像素坐标”（CRS的原点和像素坐标的原点相同）
            </li>
            <li>当<code class="highlighter-rouge">L.Map</code>准备就绪时（拥有一个中心<code class="highlighter-rouge">LatLng</code>和一个缩放级别），左上角的绝对像素坐标就成为“像素原点”
            </li>
            <li>每个<code class="highlighter-rouge">L.Layer</code>都是根据像素原点和图层的<code
                    class="highlighter-rouge">LatLng</code>的绝对像素坐标从其地图窗格中偏移
            </li>
            <li>像素原点会在<code class="highlighter-rouge">zoomend</code> 上发生的每个<code
                    class="highlighter-rouge">zoomend</code>或者<code class="highlighter-rouge">viewreset</code>
                事件之后重置，并且如有需要每个<code class="highlighter-rouge">L.Layer</code>还需重新计算其位置
            </li>
            <li>当翻转地图时，像素原点不会重置，此时只会重新定位整个窗格</li>
        </ul>

        <p>这可能有点难以接受，因此让我们来仔细分析一下如下的说明图：</p>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_new_layers/pixelorigin.html"
                            width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a
                            href="./leaflet_new_layers/pixelorigin.html">Show the example</a>
                    </small>
                </td>
            </tr>
            </tbody>
        </table>

        <p>CRS原点(绿色)始终停留在相同的位置，像素原点(红色)总是从左上角开始。
            当平移地图时，像素原点随之移动(相对于地图的容器，地图窗格重新定位)；当地图缩放时，像素原点停留在屏幕上的相同位置(地图窗格没有重新定位，但是图层会被重新绘制)。
            缩放时更新到像素原点的绝对像素坐标，平移时不更新。注意，每次缩放地图时，绝对像素坐标翻倍。</p>

        <p>为了定位任何元素（例如，蓝色<code class="highlighter-rouge">L.Marker</code>），
            它的<code class="highlighter-rouge">LatLng</code>被转换为地图的<code class="highlighter-rouge">L.CRS</code>内的绝对像素坐标。
            然后从绝对像素坐标中减去像素原点坐标，计算出相对于像素原点的偏移量(淡蓝色)。因为像素原点是所有地图窗格的左上角，
            所以这个偏移量可以应用到标记符号的HTML元素上。<code class="highlighter-rouge">iconAnchor</code>标记（深蓝线）是通过负CSS负边距实现的。</p>

        <p><code class="highlighter-rouge">L.Map.project()</code> 和 <code
                class="highlighter-rouge">L.Map.unproject()</code>
            都使用绝对像素坐标操作。同样， <code class="highlighter-rouge">L.Map.latLngToLayerPoint()</code> 和 <code
                    class="highlighter-rouge">L.Map.layerPointToLatLng()</code>都使用相对于像素原点的偏移量进行工作。</p>

        <p>不同的层以不同的方式应用这些计算。<code class="highlighter-rouge">L.Marker</code>只是重新定位它们的图标。
            <code class="highlighter-rouge">L.GridLayer</code>计算地图的边界(在绝对像素坐标中)，然后计算要请求的瓦片坐标列表;向量层(折线标记、多边形标记、圆形标记等)将每个<code
                    class="highlighter-rouge">LatLng</code>转换为像素，并使用SVG或者<code
                    class="highlighter-rouge">&lt;canvas&gt;</code>将其绘制成几何图形。
        </p>

        <h3 id="onadd-and-onremove"><code class="highlighter-rouge">onAdd</code> 和 <code class="highlighter-rouge">onRemove</code>
        </h3>

        <p>
            在其核心理念中，所有的<code class="highlighter-rouge">L.Layer</code>都是地图窗格中的HTML元素，它们的位置和内容都是通过层的代码来定义的。然而，在层被实例化时不能创建HTML元素;相反，这是在将图层添加到地图上时完成的——在此之前，层不能识别地图(甚至不能识别<code
                class="highlighter-rouge">document</code>)。</p>

        <p>换句话说,地图调用图层的<code class="highlighter-rouge">onAdd()</code>方法创建它的HTML元素(通常称为“容器”元素)，并将其添加到窗格中。相反，当从地图中删除该图层时，将会调用它的<code
                class="highlighter-rouge">onRemove()</code>方法。一个图层框架如下:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.CustomLayer = L.Layer.extend({
    onAdd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">map</span>) </span>{
        <span class="hljs-keyword">var</span> pane = map.getPane(<span class="hljs-keyword">this</span>.options.pane);
        <span class="hljs-keyword">this</span>._container = L.DomUtil.create(…);

        pane.appendChild(<span class="hljs-keyword">this</span>._container);

        <span class="hljs-comment">// Calculate initial position of container with `L.Map.latLngToLayerPoint()`, `getPixelOrigin()` and/or `getPixelBounds()`</span>

        L.DomUtil.setPosition(<span class="hljs-keyword">this</span>._container, point);

        <span class="hljs-comment">// Add and position children elements if needed</span>

        map.on(<span class="hljs-string">'zoomend viewreset'</span>, <span
                        class="hljs-keyword">this</span>._update, <span class="hljs-keyword">this</span>);
    },

    onRemove: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params">map</span>) </span>{
        L.DomUtil.remove(<span class="hljs-keyword">this</span>._container);
        map.off(<span class="hljs-string">'zoomend viewreset'</span>, <span
                        class="hljs-keyword">this</span>._update, <span class="hljs-keyword">this</span>);
    },

    _update: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-comment">// Recalculate position of container</span>

        L.DomUtil.setPosition(<span class="hljs-keyword">this</span>._container, point);        

        <span class="hljs-comment">// Add/remove/reposition children elements if needed</span>
    }
});
</code></pre>
            </div>
        </div>

        <h3 id="using-the-parents-onadd">使用父对象的 <code class="highlighter-rouge">onAdd</code></h3>

        <p>有些用例不需要重新创建整个<code class="highlighter-rouge">onAdd</code>代码，而是可以重用父代码，然后在初始化前后根据需要添加一些细节。</p>

        <p>举个例子，我们可以有一个总是红色的<code class="highlighter-rouge">L.Polyline</code>，比如:</p>

        <div class="highlighter-rouge">
            <div class="highlight">
<pre class="highlight"><code class="hljs javascript">L.Polyline.Red = L.Polyline.extend({
    onAdd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">map</span>) </span>{
        <span class="hljs-keyword">this</span>.options.color = <span class="hljs-string">'red'</span>;
        L.Polyline.prototype.onAdd.call(<span class="hljs-keyword">this</span>, map);
    }
});
</code></pre>
            </div>
        </div>


{% endblock %}