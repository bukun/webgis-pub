; Author: Bu Kun
; Title: MapProxy installation and use

# MapProxy installation and use

MapProxy is the Swiss Army Knife of the WMS web map service and slice provider.
It caches, accelerates, and transforms existing data services,
serving any desktop and web clientthatthat that supports OGC standards.

## MapProxy Installation

Currently MapProxy is already in the official Debian/Ubuntu source and can be installed via the `apt` command.

To use a newer version, you can build a Python virtual environment and install it with the `pip` command.

MapProxy1.11.0 installation: refer to the official help

Create a Python virtual environment



Installation dependencies require administrator privileges.

    sudo apt install python-imaging python-yaml libproj9
    sudo apt install libgeos-dev python-lxml libgdal-dev python-shapely



Regarding the dependent class library, libproj, Proj4 is a library for coordinate system transformation; 
Pillow, Pillow (PIL) is a library for image processing.


Installation

    Pip install PyYAML


Shapely and GEOS (optional)

If you want to use MapProxy's overlay feature, you need to install Shapely.
Shapely provides Python bindings for the GEOS library.
To install and use, you need `libgeos-dev` and `python-shapely`.
If a newer version (1.2.0 or later) of Shapely is not available in the system,
you can install it as a Python third-party package with the `pip` command.

GDAL (optional)

The coverage feature allows users to read geometry from OGR databases (Shapefiles, PostGIS, etc.).
This package is optional and is only required for OGR data sources
(BBOX, WKT and GeoJSON coverage are natively supported).
OGR is part of the GDAL ( `libgdal-dev`) package.

Lxml (optional)


Lxml is used to support more advanced WMS element information operations,
such as XSL transactions, or to connect multiple XML/HTML documents.
The name of this package is `python-lxml`.

Install MapProxy

    pip install MapProxy


Check if the installation is successful, you can use the following command

    mapproxy-util --version


Create a MapProxy configuration file:

    mapproxy-util create -t base-config mymapproxy


This command creates a folder called mymapproxy with a minimal sample configuration (`mapproxy.yaml` and `seed.yaml`).
And two completed sample configuration files (`full_example.yaml` and `full_seed_example.yaml`).

Start the test service

    cd mymapproxy
    mapproxy-util serve-develop mapproxy.yaml

Start the service by the specified port

    mapproxy-util serve-develop ~/mapproxy/mapproxy.yaml -b 0.0.0.0:8011


MapProxy comes with a demo service that lists all configured WMS and TMS layers.
You can access that service by visiting http://localhost:8080/demo/access.



## Usage



Then configure the `mapproxy.yaml` file according to the tutorial.
The following is a description of the components of the configuration file.
During the test, only the configuration of `mapproxy.yaml` was used.

Mapproxy.yaml and seed.yaml

Mapproxy.yaml: The main configuration file, configure all parts of the service, such as those services need to start, where the data comes from, those that need to be cached Mapproxy-seed mapproxy creates all the required images.
To increase the speed of the request, this tool can cache one or more polygon regions.

The configuration file uses the YAML format, and `mapproxy.yaml` mainly contains the following sections:

`globals` : Set default values, global variables, which can be used in other configuration sections.

`services` : Services provided by MapProxy, such as jWMS or TMS.

`sources` : Define where MapProxy can fetch new data sets.

`caches` : Configuring internal cache

`layers` : Configure the layers provided by MapProxy. Each layer can contain multiple data sources and cache caches.

`grids` : Define the grid used by MapProxy to arrange cached images

Note that to maintain the format, you cannot use the tab key, but only the space bar.

The contents of the configuration file are posted as follows, the code is like this:

    services:
       tms:
         use_grid_names: true
    layers:
       - name: my_layer
         title: WMS layer from tiles HiFleet
         sources: [mycache]
    caches:
       mycache:
         grids: [webmercator]
         sources: [my_tile_source]
    sources:
       my_tile_source:
         type: tile
         url: url.png
    grids:
     webmercator:
       base: GLOBAL_WEBMERCATOR
       srs: 'EPSG:3857'

For this example, you can use LeafLetJS, or OpenLayers for access testing.

The code for posting OpenLayers is as follows:

    var raster = new ol.layer.Tile({{
            source: new ol.source.XYZ({{
    url:'http://localhost:8080/tms/1.0.0/my_layer/webmercator/.png'
            }}),
    opacity: 1,
    visible:false
        }});


