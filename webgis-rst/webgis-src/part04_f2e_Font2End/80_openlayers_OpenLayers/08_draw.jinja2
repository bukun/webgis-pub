{% extends "contentj.jinja2" %}
  <title>Map drawing</title>

    {% block headbody %}
    <link rel="stylesheet" href="/f2elib/ol-6.14.1/ol.css" type="text/css">

    <!--导入最新版本ol的js文件。-->
	<script src="/f2elib/ol-6.14.1/ol.js"></script>
   <style>
        #olmap {
            border: 1px solid #ddd;
            width: 99%;
            height: 400px;
        }
    </style>

    {% endblock %}

{%  block cntbody %}

     <div id="olmap" class="olmap"></div>
    <br>
    <form class="form-inline">
      <label>Geometry type &nbsp;</label>
      <select id="type">
        <option value="Point">Point</option>
        <option value="LineString">LineString</option>
        <option value="Polygon">Polygon</option>
        <option value="Circle">Circle</option>
      </select>
    </form>
    <br>
    <div>An example of using ol.interaction.Draw interaction and ol.interaction.Modify interaction. You can paint on the map. For example, points, lines, polygons, etc.</div>
    <script>
	// 定义raster对象为瓦片图层。
      var raster = new ol.layer.Tile({
        source: new ol.source.OSM()		//加载OpenStreetMap图层数据源
      });
	//定义对象source
      var source = new ol.source.Vector();	//提供矢量图层源。矢量图层源适合编辑。可以参阅ol.source.vector
      var vector = new ol.layer.Vector({	//客户端呈现的向量数据。注意，选项中设置的任何属性都设置为层对象
//上的ol.Object属性；例如，在选项中设置标题：“My Title”意味着标题是可观察的，并且具有get/set访问器。
        source: source,			//来源。必需值。
        style: new ol.style.Style({	// 层样式。定义层的新样式。
	//填充样式
          fill: new ol.style.Fill({	//填充样式。
            color: 'rgba(255, 255, 255, 0.2)'	//填充颜色（有颜色，梯度或模式。）
          }),
	//笔画样式
          stroke: new ol.style.Stroke({		//设置矢量特征笔画样式。注意，给定的缺省值是画布默认值，如果没有定//义选项，将使用它。get函数返回在选项中输入的任何内容；它们不会返回默认值。
            color: '#ffcc33',			//颜色值
            width: 2				//宽度
          }),		
	//图片样式
          image: new ol.style.Circle({		//为矢量设置圆样式
            radius: 7,				//圆半径，必需值。
            fill: new ol.style.Fill({		//填充样式
              color: '#ffcc33'
            })
          })
        })
      });
	//加载地图
      var olmap = new ol.Map({
	//加载图层
        layers: [raster, vector],
        target: 'olmap',		//地图容器div的id
        view: new ol.View({	//地图为2D视图
          center: [-11000000, 4600000],	//地图初始中心点
          zoom: 4			//地图初始级别	
        })
      });

      var modify = new ol.interaction.Modify({source: source});	//用于修改特征几何结构的操作。若要修改已添加到现有//source的features，请与source选项构造修改交互。如果希望修改集合中的features（例如，由选择交互使用的集合），则使//用features选项构造交互。交互必须用source或features选项来构造。
      olmap.addInteraction(modify);

      var draw, snap; // 我们可以在以后删除它们
      var typeSelect = document.getElementById('type');

      function addInteractions() {
        draw = new ol.interaction.Draw({	//用于绘制特征几何图形的交互。
          source: source,			//已绘制特征的目标源。
          type: typeSelect.value		//绘制的类型。如点、线、圆等。
        });
        olmap.addInteraction(draw);
        snap = new ol.interaction.Snap({source: source});		//处理矢量特征，同时修改或绘制矢量特征。
        olmap.addInteraction(snap);

      }

      /**
       * Handle更改事件。
       */
      typeSelect.onchange = function() {
        olmap.removeInteraction(draw);
        olmap.removeInteraction(snap);
        addInteractions();
      };

      addInteractions();
    </script>

{% endblock %}
<!--使用ol.interaction.Draw的例子。对地图绘画和修改-->