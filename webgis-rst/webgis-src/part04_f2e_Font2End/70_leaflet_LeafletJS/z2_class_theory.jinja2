{% extends "contentj.jinja2" %}


{% block headbody %}
    <title>扩展Leaflet： 类的原理</title>
{% endblock %}

{% block cntbody %}

        <h2 id="extending-leaflet">Leaflet扩展</h2>

        <p>Leaflet上有数百个插件，这些插件扩展了Leaflet的功能。</p>

        <p>插件众多的原因之一是Leaflet易于扩展功能，本教程将介绍最常用的扩展方法。</p>

        <p>请注意，本教程假设您已经很好地掌握:</p>

        <ul>
            <li><a href="https://developer.mozilla.org/en-US/Learn/JavaScript">JavaScript</a></li>
            <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">DOM处理</a>
            </li>
            <li><a href="https://en.wikipedia.org/wiki/Object-oriented_programming">面向对象编程</a> (理解类、实例、继承、方法和属性等概念)</li>
        </ul>

        <h2 id="leaflet-architecture">Leaflet架构</h2>

        <p>让我们看看Leaflet 1.0.0.的简化UML类图。Leaflet 1.0.0.有60多个JavaScript类，所以这张图有点大。幸运的是，我们可以用<code
                class="highlighter-rouge">L.ImageOverlay</code>创建一个可缩放的图片:
        </p>

        <table>
            <tbody>
            <tr>
                <td style="text-align: center; border: none">
                    <iframe src="./leaflet_class_theory/class-diagram.html"
                            width="616" height="416"></iframe>
                </td>
            </tr>
            <tr>
                <td style="text-align: center; border: none">
                    <small><a
                            href="./leaflet_class_theory/class-diagram.html">Show the example</a>
                    </small>
                </td>
            </tr>
            </tbody>
        </table>

        <p>从技术角度看，Leaflet可以通过不同的方式扩展:</p>

        <ul>
            <li>最常见的：用<code class="highlighter-rouge">L.Class.extend()</code>创建一个新的<code
                    class="highlighter-rouge">L.Layer</code>子类，<code class="highlighter-rouge">L.Handler</code>子类或<code
                    class="highlighter-rouge">L.Control</code>子类
                <ul>
                    <li>当地图移动或者缩放时，图层随之移动</li>
                    <li>处理程序是不可见的，并且它解释浏览器事件</li>
                    <li>控件是固定的接口元素。</li>
                </ul>
            </li>
            <li>使用<code class="highlighter-rouge">L.Class.include()</code>在现有的类中包含新的功能</li>
            <ul>
                <li>添加新的方法和选项</li>
                <li>改变某些方法</li>
                <li>使用 <code class="highlighter-rouge">addInitHook</code>方法来运行额外的构造器代码。</li>
            </ul>
            </li>
            <li> 使用<code class="highlighter-rouge">L.Class.include()</code>来更改已经存在的类中的部分内容</li>
        </ul>

        <p>本教程介绍的类和方法仅适用于Leaflet 1.0.0，当您使用之前的版本开发插件时请慎用。</p>

        <h2 id="lclass"><code class="highlighter-rouge">L.Class</code></h2>

        <p>JavaScript是一种有点奇怪的语言。它并不是一种真正的面向对象语言，而是一种面向原型的语言。这曾经使得JavaScript使用传统意义上的面向对象编程的类继承变得困难。</p>

        <p>Leaflet的<code class="highlighter-rouge">L.Class</code>使类的继承变得简单.</p>

        <p>尽管现代的JavaScript可以使用ES6中的类，但是Leaflet并不是基于ES6设计的。</p>

        <h3 id="lclassextend"><code class="highlighter-rouge">L.Class.extend()</code></h3>

        <p> 我们可以使用<code class="highlighter-rouge">.extend()</code>方法在Leaflet中创建任何子类。这个方法使用一个参数：即一个键值对的简单对象，每个键都是属性或者方法的名称，每个值都是属性的初始值或者方法函数:
        </p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> MyDemoClass = L.Class.extend({

    <span class="hljs-comment">// A property with initial value = 42</span>
    myDemoProperty: <span class="hljs-number">42</span>,   

    <span class="hljs-comment">// A method </span>
    myDemoMethod: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> <span
                        class="hljs-keyword">this</span>.myDemoProperty; }
    
});

<span class="hljs-keyword">var</span> myDemoInstance = <span class="hljs-keyword">new</span> MyDemoClass();

<span class="hljs-comment">// This will output "42" to the development console</span>
<span class="hljs-built_in">console</span>.log( myDemoInstance.myDemoMethod() );   
</code></pre>
            </div>
        </div>

        <p>在命名类、方法和属性时，要遵循以下规则：</p>

        <ul>
            <li>在为函数、方法、属性、factory命名时请使用 <code class="highlighter-rouge">lowerCamelCase</code>命名法。</li>
            <li>类的命名应该使用<a href="https://en.wikipedia.org/wiki/CamelCase"><code
                    class="highlighter-rouge">UpperCamelCase</code></a>命名法。
            </li>
            <li>私有属性和方法以下划线(<code class="highlighter-rouge">_</code>)开始。这并不意味着它们是私有的，只是建议开发者不要直接使用它们。</li>
        </ul>

        <h3 id="lclassinclude"><code class="highlighter-rouge">L.Class.include()</code></h3>

        <p>如果类已经被定义了，那么可以重新定义已有的属性或方法，也可以使用<code class="highlighter-rouge">.include()</code>方法添加新的属性或方法:</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">MyDemoClass.include({

    <span class="hljs-comment">// Adding a new property to the class</span>
    _myPrivateProperty: <span class="hljs-number">78</span>,
    
    <span class="hljs-comment">// Redefining a method</span>
    myDemoMethod: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span
                        class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> <span
                        class="hljs-keyword">this</span>._myPrivateProperty; }

});

<span class="hljs-keyword">var</span> mySecondDemoInstance = <span class="hljs-keyword">new</span> MyDemoClass();

<span class="hljs-comment">// This will output "78"</span>
<span class="hljs-built_in">console</span>.log( mySecondDemoInstance.myDemoMethod() );

<span class="hljs-comment">// However, properties and methods from before still exist</span>
<span class="hljs-comment">// This will output "42"</span>
<span class="hljs-built_in">console</span>.log( mySecondDemoInstance.myDemoProperty );
</code></pre>
            </div>
        </div>

        <h3 id="lclassinitialize"><code class="highlighter-rouge">L.Class.initialize()</code></h3>

        <p>在OOP中，类有一个构造函数方法。在Leaflet的<code class="highlighter-rouge">L.Class</code>中，构造函数方法总是被命名为<code
                class="highlighter-rouge">initialize</code>。</p>

        <p>如果你的类拥有一些特定的<code class="highlighter-rouge">options</code>,在构造器中使用<code
                class="highlighter-rouge">L.setOptions()</code>方法来初始化选项是个好主意。这个实用的函数会将提供的选项与类的默认选项合并。</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> MyBoxClass = L.Class.extend({

    options: {
        width: <span class="hljs-number">1</span>,
        height: <span class="hljs-number">1</span>
    },

    initialize: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name, options</span>) </span>{
        <span class="hljs-keyword">this</span>.name = name;
        L.setOptions(<span class="hljs-keyword">this</span>, options);
    }
    
});

<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> MyBoxClass(<span
                        class="hljs-string">'Red'</span>, {width: <span class="hljs-number">10</span>});

<span class="hljs-built_in">console</span>.log(instance.name); <span class="hljs-comment">// Outputs "Red"</span>
<span class="hljs-built_in">console</span>.log(instance.options.width); <span
                        class="hljs-comment">// Outputs "10"</span>
<span class="hljs-built_in">console</span>.log(instance.options.height); <span class="hljs-comment">// Outputs "1", the default</span>
</code></pre>
            </div>
        </div>

        <p>Leaflet使用特殊的方式处理<code class="highlighter-rouge">options</code>的属性：子类将会继承父类的选项属性。</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-keyword">var</span> MyCubeClass = MyBoxClass.extend({
    options: {
        depth: <span class="hljs-number">1</span>
    }
});

<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> MyCubeClass(<span
                        class="hljs-string">'Blue'</span>);

<span class="hljs-built_in">console</span>.log(instance.options.width); <span class="hljs-comment">// Outputs "1", parent class default</span>
<span class="hljs-built_in">console</span>.log(instance.options.height); <span class="hljs-comment">// Outputs "1", parent class default</span>
<span class="hljs-built_in">console</span>.log(instance.options.depth); <span class="hljs-comment">// Outputs "1"</span>
</code></pre>
            </div>
        </div>

        <p>子类执行父类构造函数后，再执行自己的构造函数，这是很常见的。在Leafleet中通过使用<code class="highlighter-rouge">L.Class.addInitHook()</code>方法来实现。这个方法可以在类的<code
                class="highlighter-rouge">initialize()</code>方法执行之后立刻“钩住”初始化函数，例如：</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">MyBoxClass.addInitHook(<span
                    class="hljs-function"><span class="hljs-keyword">function</span>(<span
                    class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">this</span>._area = <span class="hljs-keyword">this</span>.options.width * <span
                        class="hljs-keyword">this</span>.options.length;
});
</code></pre>
            </div>
        </div>

        <p>在<code class="highlighter-rouge">initialize()</code>方法执行（调用<code
                class="highlighter-rouge">setOptions()</code>方法）之后会执行该函数。这就意味着<code
                class="highlighter-rouge">this.options</code>在“挂钩”函数运行之前已经生效。</p>

        <p><code class="highlighter-rouge">addInitHook</code>还有一种语法，可以将方法名称和方法中调用的参数设置为它的参数。</p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">MyCubeClass.include({
    _calculateVolume: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>) </span>{
        <span class="hljs-keyword">this</span>._volume = <span class="hljs-keyword">this</span>.options.width * <span
                        class="hljs-keyword">this</span>.options.length * <span class="hljs-keyword">this</span>.options.depth;
    }
});

MyCubeClass.addInitHook(<span class="hljs-string">'_calculateVolume'</span>, argValue1, argValue2);
</code></pre>
            </div>
        </div>

        <h3 id="methods-of-the-parent-class">父类的方法</h3>

        <p>通过访问父类的原型来调用父类的方法，这要使用<code class="highlighter-rouge">Function.call(…)</code>方法来实现。比如，可以在<code
                class="highlighter-rouge">L.FeatureGroup</code>代码中可以看到：
        </p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript">L.FeatureGroup = L.LayerGroup.extend({

    addLayer: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span
                        class="hljs-params">layer</span>) </span>{
        …
        L.LayerGroup.prototype.addLayer.call(<span class="hljs-keyword">this</span>, layer);
    },
    
    removeLayer: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span
                        class="hljs-params">layer</span>) </span>{
        …
        L.LayerGroup.prototype.removeLayer.call(<span class="hljs-keyword">this</span>, layer);
    },

    …
});
</code></pre>
            </div>
        </div>

        <p>调用父类的构造函数也可以使用相同的方法，但是要使用<code class="highlighter-rouge">ParentClass.prototype.initialize.call(this,
            …)</code>方法替代。
        </p>

        <h3 id="factories">Factories方法</h3>

        <p>大多数的Leaflet类拥有对应的<a href="https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29">factory
            function</a>方法。Factories方法拥有和对应类相同的名字，只不过Factories方法使用<code class="highlighter-rouge">lowerCamelCase</code>:
        </p>

        <div class="highlighter-rouge">
            <div class="highlight"><pre class="highlight"><code class="hljs javascript"><span
                    class="hljs-function"><span
                    class="hljs-keyword">function</span> <span class="hljs-title">myBoxClass</span>(<span
                    class="hljs-params">name, options</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyBoxClass(name, options);
}
</code></pre>
            </div>
        </div>

        <h3 id="naming-conventions">命名规则 </h3>

        <p>为Leaflet的插件命名时请遵循一下命名规则：</p>

        <ul>
            <li>永远不要在你的插件中暴露全局变量。</li>
            <li>如果你有一个新类，就将它直接放在<code class="highlighter-rouge">L</code> 命名空间 (<code
                    class="highlighter-rouge">L.MyPlugin</code>)。
            </li>
            <li>如果要继承一个现有的类，就去设置已有类的子属性。</li>
        </ul>


{% endblock %}